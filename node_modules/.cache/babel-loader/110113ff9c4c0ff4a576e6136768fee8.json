{"ast":null,"code":"var _jsxFileName = \"/Users/bill/Documents/Codes/Full_stack/client/src/pages/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../helpers/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Post() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const {\n    authState\n  } = useContext(AuthContext);\n  useEffect(() => {\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then(response => {\n      setPostObject(response.data);\n    });\n    axios.get(`http://localhost:3001/comments/${id}`).then(response => {\n      setComments(response.data);\n    });\n  }, []);\n\n  const addComment = () => {\n    axios.post(\"http://localhost:3001/comments\", {\n      commentBody: newComment,\n      PostId: id\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      if (response.data.error) {\n        console.log(response.data.error);\n      } else {\n        const commentToAdd = {\n          commentBody: newComment,\n          username: response.data.username\n        };\n        setComments([...comments, commentToAdd]);\n        setNewComment(\"\");\n      }\n    });\n  };\n\n  const deleteComment = id => {\n    axios.delete(`http://localhost:3001/comments/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      setComments(comments.filter(val => {\n        return val.id != id;\n      }));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leftSide\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        id: \"individual\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: [\" \", postObject.title, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body\",\n          children: postObject.postText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer\",\n          children: postObject.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightSide\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addCommentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Comment...\",\n          autoComplete: \"off\",\n          value: newComment,\n          onChange: event => {\n            setNewComment(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addComment,\n          children: \" Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"listOfComments\",\n        children: comments.map((comment, key) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: [comment.commentBody, /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\" Username: \", comment.username]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), authState.username === comment.username && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                deleteComment(comment.id);\n              },\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Post, \"uApQKjtJMaJ0rUtQ058ZjaFRt4A=\", false, function () {\n  return [useParams];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/bill/Documents/Codes/Full_stack/client/src/pages/Post.js"],"names":["React","useEffect","useState","useContext","useParams","axios","AuthContext","Post","id","postObject","setPostObject","comments","setComments","newComment","setNewComment","authState","get","then","response","data","addComment","post","commentBody","PostId","headers","accessToken","localStorage","getItem","error","console","log","commentToAdd","username","deleteComment","delete","filter","val","title","postText","event","target","value","map","comment","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../helpers/AuthContext\";\n\nfunction Post() {\n  let { id } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const { authState } = useContext(AuthContext);\n\n  useEffect(() => {\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then((response) => {\n      setPostObject(response.data);\n    });\n\n    axios.get(`http://localhost:3001/comments/${id}`).then((response) => {\n      setComments(response.data);\n    });\n  }, []);\n\n  const addComment = () => {\n    axios\n      .post(\n        \"http://localhost:3001/comments\",\n        {\n          commentBody: newComment,\n          PostId: id,\n        },\n        {\n          headers: {\n            accessToken: localStorage.getItem(\"accessToken\"),\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data.error) {\n          console.log(response.data.error);\n        } else {\n          const commentToAdd = {\n            commentBody: newComment,\n            username: response.data.username,\n          };\n          setComments([...comments, commentToAdd]);\n          setNewComment(\"\");\n        }\n      });\n  };\n\n  const deleteComment = (id) => {\n    axios\n      .delete(`http://localhost:3001/comments/${id}`, {\n        headers: { accessToken: localStorage.getItem(\"accessToken\") },\n      })\n      .then(() => {\n        setComments(\n          comments.filter((val) => {\n            return val.id != id;\n          })\n        );\n      });\n  };\n\n  return (\n    <div className=\"postPage\">\n      <div className=\"leftSide\">\n        <div className=\"post\" id=\"individual\">\n          <div className=\"title\"> {postObject.title} </div>\n          <div className=\"body\">{postObject.postText}</div>\n          <div className=\"footer\">{postObject.username}</div>\n        </div>\n      </div>\n      <div className=\"rightSide\">\n        <div className=\"addCommentContainer\">\n          <input\n            type=\"text\"\n            placeholder=\"Comment...\"\n            autoComplete=\"off\"\n            value={newComment}\n            onChange={(event) => {\n              setNewComment(event.target.value);\n            }}\n          />\n          <button onClick={addComment}> Add Comment</button>\n        </div>\n        <div className=\"listOfComments\">\n          {comments.map((comment, key) => {\n            return (\n              <div key={key} className=\"comment\">\n                {comment.commentBody}\n                <label> Username: {comment.username}</label>\n                {authState.username === comment.username && (\n                  <button\n                    onClick={() => {\n                      deleteComment(comment.id);\n                    }}\n                  >\n                    X\n                  </button>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}