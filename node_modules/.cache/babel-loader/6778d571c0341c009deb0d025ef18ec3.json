{"ast":null,"code":"var _jsxFileName = \"/Users/bill/Documents/Codes/Full_stack/client/src/pages/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../helpers/AuthContexts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Post() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const {\n    authState\n  } = useContext(AuthContext);\n  let history = useHistory();\n  useEffect(() => {\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then(response => {\n      setPostObject(response.data);\n    });\n    axios.get(`http://localhost:3001/comments/${id}`).then(response => {\n      setComments(response.data);\n    });\n  }, []);\n\n  const addComment = () => {\n    axios.post(\"http://localhost:3001/comments\", {\n      commentBody: newComment,\n      PostId: id\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      if (response.data.error) {\n        console.log(response.data.error);\n        alert(response.data.error);\n      } else {\n        const commentToAdd = {\n          commentBody: newComment,\n          username: response.data.username\n        }; // username is from response using validateToken in the middleware\n\n        setComments([...comments, commentToAdd]);\n        setNewComment(\"\");\n      }\n    });\n  };\n\n  const deleteComment = id => {\n    axios.delete(`http://localhost:3001/comments/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      setComments(comments.filter(val => {\n        return val.id !== id;\n      }));\n    });\n  };\n\n  const deletePost = id => {\n    axios.delete(`http://localhost:3001/posts/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      history.push(\"/\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leftSide\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        id: \"individual\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: [\" \", postObject.title, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body\",\n          children: postObject.postText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer\",\n          children: [postObject.username, authState.username === postObject.username && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              deletePost(postObject.id);\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightSide\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addCommentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Comment...\",\n          autoComplete: \"off\",\n          value: newComment,\n          onChange: event => {\n            setNewComment(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addComment,\n          children: \" Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"listOfComments\",\n        children: comments.map((comment, key) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: [comment.commentBody, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Username: \", comment.username]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), authState.username === comment.username && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                deleteComment(comment.id);\n              },\n              children: \" X \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Post, \"CXbvkMaogpoT8Q9VFd6tUCx+sQk=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/bill/Documents/Codes/Full_stack/client/src/pages/Post.js"],"names":["React","useEffect","useState","useContext","useParams","useHistory","axios","AuthContext","Post","id","postObject","setPostObject","comments","setComments","newComment","setNewComment","authState","history","get","then","response","data","addComment","post","commentBody","PostId","headers","accessToken","localStorage","getItem","error","console","log","alert","commentToAdd","username","deleteComment","delete","filter","val","deletePost","push","title","postText","event","target","value","map","comment","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext} from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../helpers/AuthContexts\";\n\nfunction Post() {\n  let { id } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const { authState } = useContext(AuthContext);\n  let history = useHistory();\n\n  useEffect(() => {\n      axios.get(`http://localhost:3001/posts/byId/${id}`).then((response) => {\n        setPostObject(response.data);\n      });\n\n      axios.get(`http://localhost:3001/comments/${id}`).then((response) => {\n        setComments(response.data);\n      });\n    }, [] \n  ) \n\n  const addComment = () => {\n    axios\n      .post(\"http://localhost:3001/comments\", \n      {\n        commentBody: newComment,\n        PostId: id,\n      },\n      {\n        headers: {\n          accessToken: localStorage.getItem(\"accessToken\"),\n        },\n      })\n      .then((response) => {\n        if (response.data.error) {\n          console.log(response.data.error);\n          alert(response.data.error);\n        } else {\n          const commentToAdd = { commentBody: newComment, username: response.data.username}; // username is from response using validateToken in the middleware\n          setComments([...comments, commentToAdd]);\n          setNewComment(\"\");\n        }\n        \n      });\n  };\n\n  const deleteComment = (id) => {\n    axios.delete(\n      `http://localhost:3001/comments/${id}`,\n      {\n        headers: {\n          accessToken: localStorage.getItem(\"accessToken\"),\n        },\n      }).then(() => {\n        setComments(comments.filter((val) => {\n          return val.id !== id;\n        }))\n      });\n  };\n\n  const deletePost = (id) =>{\n    axios.delete(\n      `http://localhost:3001/posts/${id}`,\n      {\n        headers: {\n          accessToken: localStorage.getItem(\"accessToken\"),\n        },\n      }).then(() => {\n        history.push(\"/\");\n      });\n  };\n\n  return (\n    <div className=\"postPage\">\n      <div className=\"leftSide\">\n        <div className=\"post\" id=\"individual\">\n          <div className=\"title\"> {postObject.title} </div>\n          <div className=\"body\">{postObject.postText}</div>\n          <div className=\"footer\">\n            {postObject.username}\n            {authState.username===postObject.username && \n            (<button onClick={() => {deletePost(postObject.id)}}>Delete</button>)}\n          </div>\n        </div>\n      </div>\n      <div className=\"rightSide\">\n        <div className=\"addCommentContainer\">\n          <input\n            type=\"text\"\n            placeholder=\"Comment...\"\n            autoComplete=\"off\"\n            value={newComment}\n            onChange={(event) => {\n              setNewComment(event.target.value);\n            }}\n          />\n          <button onClick={addComment}> Add Comment</button>\n        </div>\n        <div className=\"listOfComments\">\n          {comments.map((comment, key) => {\n            return (\n              <div key={key} className=\"comment\">\n                {comment.commentBody}\n                <br />\n                <label>Username: {comment.username}</label>\n                {authState.username===comment.username && \n                  <button onClick={() => {deleteComment(comment.id)}}> X </button>\n                }\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}