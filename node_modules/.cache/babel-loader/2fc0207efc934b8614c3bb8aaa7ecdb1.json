{"ast":null,"code":"var _jsxFileName = \"/Users/bill/Documents/Codes/Full_stack/client/src/pages/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Post() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  useEffect(() => {\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then(response => {\n      setPostObject(response.data);\n    });\n    axios.get(`http://localhost:3001/comments/${id}`).then(response => {\n      setComments(response.data);\n    });\n  }, []); // to prevent api calling all the timme, because everythime there's state chagne, add `, []`, which provide no state, so it only run once.\n\n  const addComment = () => {\n    axios.post(\"http://localhost:3001/comments\", {\n      commentBody: newComment,\n      PostId: id\n    }).then(response => {\n      const commentToAdd = {\n        commentBody: newComment\n      };\n      setComments(...comment, commentToAdd); // automatically refresh the setComment list.\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leftSide\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        id: \"individual\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: [\" \", postObject.title, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body\",\n          children: postObject.postText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer\",\n          children: postObject.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightSide\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createCommentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Comment...\",\n          autoComplete: \"off\",\n          onChange: event => {\n            setNewComment(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addComment,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"listOfComments\",\n        children: comments.map((comment, key) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: [\" \", comment.commentBody, \" \"]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Post, \"7L4aHWDeWEG0/obUbx5Ket+BFag=\", false, function () {\n  return [useParams];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/bill/Documents/Codes/Full_stack/client/src/pages/Post.js"],"names":["React","useEffect","useState","useParams","axios","Post","id","postObject","setPostObject","comments","setComments","newComment","setNewComment","get","then","response","data","addComment","post","commentBody","PostId","commentToAdd","comment","title","postText","username","event","target","value","map","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nfunction Post() {\n  let { id } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n\n  useEffect(() => {\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then((response) => {\n      setPostObject(response.data);\n    });\n\n    axios.get(`http://localhost:3001/comments/${id}`).then((response) => {\n      setComments(response.data);\n    });\n\n  }, []); // to prevent api calling all the timme, because everythime there's state chagne, add `, []`, which provide no state, so it only run once.\n\n  const addComment = () => {\n    axios\n      .post(\"http://localhost:3001/comments\", {commentBody: newComment, PostId: id})\n      .then((response) => {\n          const commentToAdd = {commentBody: newComment};\n          setComments(...comment, commentToAdd); // automatically refresh the setComment list.\n      });\n  };\n\n  return (\n    <div className=\"postPage\">\n      <div className=\"leftSide\">\n        <div className=\"post\" id=\"individual\">\n          <div className=\"title\"> {postObject.title} </div>\n          <div className=\"body\">{postObject.postText}</div>\n          <div className=\"footer\">{postObject.username}</div>\n        </div>\n      </div>\n      <div className=\"rightSide\">\n        <div className=\"createCommentContainer\">\n          {/* The following line is how to grab values from input, the onChange */}\n          <input type=\"text\" placeholder=\"Comment...\" autoComplete=\"off\" \n            onChange={(event) => {setNewComment(event.target.value)}}/>\n          <button onClick={addComment}>Add Comment</button>\n        </div>\n        <div className=\"listOfComments\">\n          {comments.map((comment, key) => {\n            return <div key={key} className=\"comment\"> {comment.commentBody} </div>\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n\n"]},"metadata":{},"sourceType":"module"}